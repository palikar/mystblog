<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Stanislav Arnaudov</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Stanislav Arnaudov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Summary of my personal projects from over the years</title>
      <link>/posts/projects_over_the_years/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/projects_over_the_years/</guid>
      <description>Abstract This post is meant as an answer to questions of the type &amp;ldquo;Tell me about some of your personal projects&amp;rdquo;. I&amp;rsquo;ll go over every major endeavor that I&amp;rsquo;ve undertaken per my own initiative and I&amp;rsquo;ll give a little bit information on why I&amp;rsquo;ve chosen to write it, what has been the idea, and what I have learned in the process of making it.
&amp;mdash; AdvancedResouceMenaging &amp;mdash; Github Repository
A Java application from my high-school days.</description>
    </item>
    
    <item>
      <title>How DRY maybe hurting you</title>
      <link>/posts/dry_maybe_bad/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/dry_maybe_bad/</guid>
      <description>Abstract The current culture of software development puts a huge emphasis on the SOLID principles. In universities, in boot camps, and crash courses young developers are being told to follow these principles and this will eventually lead them to produce &amp;ldquo;good software&amp;rdquo;. Young developers, being young, follow the principles dogmatically, often without stopping to think why are they actually doing it and what the downstream consequences might be of their design/approach choices.</description>
    </item>
    
    <item>
      <title>DirectXer GPU Fame Walkthrough</title>
      <link>/posts/frame_anlysis/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>/posts/frame_anlysis/</guid>
      <description>Abstract List of covered topis The walkthrough </description>
    </item>
    
    <item>
      <title>Watching and reading list of greatness</title>
      <link>/posts/watching_list/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/watching_list/</guid>
      <description>Abstract A collection of talks, lectures, and reads that have affected me greatly in my professional life.
The list Extreme SIMD: Optimized Collision Detection in Titanfall &amp;ndash; the best demonstration I&amp;rsquo;ve seen of how thinking about the hardware of a computer can work wonders when developing a novel algorithm scheme.
Practicl creativity in Game design &amp;ndash; the talk is packed with useful practical tips that can be applied to any creative endeavor, not only game design.</description>
    </item>
    
    <item>
      <title>More C Less &#43;&#43;</title>
      <link>/posts/more_c_less_plus_plus/</link>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/more_c_less_plus_plus/</guid>
      <description>Abstract Recently I have moved in the direction of being a &amp;ldquo;C++ bad&amp;rdquo; person. I have learned C++ through watching CppCon talks so it&amp;rsquo;s not like I don&amp;rsquo;t understand the language. There was even a time when I fully bought into its philosophy. This time has passed. In recent years I&amp;rsquo;ve experimented with just how little I can use C++ and still be able to write performant, good, and easy-to-understand code.</description>
    </item>
    
    <item>
      <title>Software development philosophy</title>
      <link>/posts/software_philosophy/</link>
      <pubDate>Sun, 25 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/software_philosophy/</guid>
      <description>In the last couple of years, I&amp;rsquo;ve had a major shift in the way I view the whole process of &amp;ldquo;software development&amp;rdquo;. In this post, I want to share my current views and clearly state what I (currently) believe about programming, what my priorities are, and what I am thinking about when starting a new software project.
My shift in perspective Several factors made me reconsider what I believe bout software development.</description>
    </item>
    
    <item>
      <title>Generic Execution Around Pointer</title>
      <link>/posts/generic_execution_around_pointer/</link>
      <pubDate>Thu, 05 Dec 2019 00:12:08 +0100</pubDate>
      
      <guid>/posts/generic_execution_around_pointer/</guid>
      <description>Abstract I recently found out what the Execute-Around_Pointer idiom in C++ is. What it does is track access to a specific object. For example, when you want to observe how certain properties of an object change on each method call, you would employ the use of this idiom. Think of it like wrapping each method call for an object with additional function calls. This, for empale, is ugly code:
std::vector&amp;lt;int&amp;gt; vec{1,2,3,4}; std::cout &amp;lt;&amp;lt; std::size(vec) vec.</description>
    </item>
    
    <item>
      <title>Multidimensional Array size deduction in C&#43;&#43;</title>
      <link>/posts/array_dim_deduction/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0100</pubDate>
      
      <guid>/posts/array_dim_deduction/</guid>
      <description>Abstract Recently I encountered a small particularity of the C++ standard that I&amp;rsquo;ve known about previously but didn&amp;rsquo;t really care about up this point. The whole thing has to do with template type parameters. It turns out that C++ can&amp;rsquo;t deduce the type of a braced initializer. This has some funny consequences when you are designing a function that can take &amp;ldquo;everything&amp;rdquo; including arrays and you want to be able to call the function as function({1,3,4,5}).</description>
    </item>
    
    <item>
      <title>Train-Validation-Test split in PyTorch</title>
      <link>/posts/pytorch_datasplit/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0200</pubDate>
      
      <guid>/posts/pytorch_datasplit/</guid>
      <description>Abstract PyTorch is great! It offers tons of utilities that make every ML project a little bit less daunting. It&amp;rsquo;s easy to have your DNN-model up and running in almost no time. At the same time, the framework is still relatively unopinionated and lets you decide on the exact structure of your project. I&amp;rsquo;ve been playing around with PyTorch recently and the one thing I&amp;rsquo;ve been missing so far is to be able to create a train-validation-test split of my data in an &amp;ldquo;out of the box&amp;rdquo; manner.</description>
    </item>
    
    <item>
      <title>ABV Emails Retrieval</title>
      <link>/posts/abv_mails/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/abv_mails/</guid>
      <description>Abstract So for several years now, I&amp;rsquo;ve been fed up with the email provider that I&amp;rsquo;ve been using. I choose it - or there it was chosen for me by my dad - in my most early internet days. Because of its early inception, the email has accumulated an enormous amount of emails over the years. Currently, I have around 7000 emails. Yes, the majority of them are useless spam but I really don&amp;rsquo;t want to go over all of them and clean them up.</description>
    </item>
    
    <item>
      <title>Compile time pipeline in C&#43;&#43;</title>
      <link>/posts/compile_time_pipeline/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>/posts/compile_time_pipeline/</guid>
      <description>Abstract Recently I&amp;rsquo;ve been looking into the code of ChaiScript &amp;ndash; a scripting language written by Jason Turner that integrates seamlessly with C++. It&amp;rsquo;s a great project and you can learn a ton on parsing, general scripting language design and overall C++ from it. In its code, I&amp;rsquo;ve found several gems and idioms that I didn&amp;rsquo;t know before. Here I want to very briefly present a certain pattern that particularly caught my eye.</description>
    </item>
    
    <item>
      <title>The optimal CMake project structure.</title>
      <link>/posts/cmake_structure/</link>
      <pubDate>Wed, 10 Apr 2019 00:00:00 +0200</pubDate>
      
      <guid>/posts/cmake_structure/</guid>
      <description>Abstract I am sure that every C++ programmer has at one point struggled with CMake. There have been multiple times where when I have to start work on some C++ project, I&amp;rsquo;ve to spend a good couple of hours in thinking how should my project structure look like. It&amp;rsquo;s just such a huge hassle to think about all of your CMakeList.txt files and possible libraries and different modules and&amp;hellip; the things that may go wrong with your build system.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; things to think about while programming</title>
      <link>/posts/cpp_tips/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>/posts/cpp_tips/</guid>
      <description>Abstract C++ is hard! C++ is even harder when you want to write good code. There are a lot of things to think about when you write code and if you don&amp;rsquo;t think about them, you are probably going to mess things up. Recently I&amp;rsquo;ve found that one good book (see references) that gives 42 (hehe!) concrete tips on how to be a better c++ programmer. This is my summary of sorts about the contents of said book.</description>
    </item>
    
    <item>
      <title>Notes on learning Numpy</title>
      <link>/posts/numpy_notes/</link>
      <pubDate>Fri, 20 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>/posts/numpy_notes/</guid>
      <description>My notes while reading this. More or less copy paste. Take with a grain of salt&amp;hellip;or sugar.
Abstract NumPy is a Python package. It stands for &amp;lsquo;Numerical Python&amp;rsquo;. It is a library consisting of multidimensional array classes and a collection of routines for processing of an array. From the officials:
NumPy is the fundamental package for scientific computing with Python. It contains among other things:
a powerful N-dimensional array object sophisticated (broadcasting) functions tools for integrating C/C++ and Fortran code useful linear algebra, Fourier transform, and random number capabilities Besides its obvious scientific uses, NumPy can also be used as an efficient multi-dimensional container of generic data.</description>
    </item>
    
    <item>
      <title>Notes on learning Pandas</title>
      <link>/posts/pandas_notes/</link>
      <pubDate>Fri, 13 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>/posts/pandas_notes/</guid>
      <description>For transparency&amp;rsquo;s sake - those are my notes while learning about pandas from this tutorial. At times this here is just copy-paste from it, at others, it&amp;rsquo;s my own thoughts and explanations. This is meant to be a condensed version of the tutorial more or less just for me. If you found it useful though, well, good for you, I guess.
Abstract Basic pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with &amp;ldquo;relational Heterogeneous data&amp;rdquo; or &amp;ldquo;labeled&amp;rdquo; data both easy and intuitive.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Template Specialization</title>
      <link>/posts/cpp_template_specialization/</link>
      <pubDate>Fri, 06 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>/posts/cpp_template_specialization/</guid>
      <description>Abstract C++ is awesome! I am starting strong here but it really is. When experienced (and crazy) enough one can implement everything and the at the same can do it incredibly efficient at run time (cuz who cares how much work does the compiler do for us). I can rant about how c++ is the best and all of its great features but for this post I will constraint myself to one particular part of C++ - template meta-programming!</description>
    </item>
    
    <item>
      <title>Emacs windows resizing</title>
      <link>/posts/emacs_framer/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0200</pubDate>
      
      <guid>/posts/emacs_framer/</guid>
      <description>Abstract Recently I&amp;rsquo;ve been introduced to the concept of a tiling windows manager. One key feature that caught my attention is how you can quickly resize the different windows and create the desired windows configuration with just a few executions of some keybindings. That got me to wonder how it would cool if I also have that in Emacs. I googled something like &amp;ldquo;resize emacs windows&amp;rdquo; but didn&amp;rsquo;t really (I didn&amp;rsquo;t want really) find a package that can do that.</description>
    </item>
    
    <item>
      <title>Github commits&#39; emails change</title>
      <link>/posts/github_history_repair/</link>
      <pubDate>Fri, 22 Jun 2018 00:00:00 +0200</pubDate>
      
      <guid>/posts/github_history_repair/</guid>
      <description>Abstract You know that Contributions panel on your Github profile page. Let&amp;rsquo;s face it, developers these days take much pride when they can show their consistent work and progress of their own/forked repositories&amp;hellip; even when some of their commits are nothing more than an implementation of a single function. Or of course, it may be just me with that pride 😒. Said panel is a clear indication to your future employee or members of your &amp;ldquo;coding community&amp;rdquo; that you are pretty much a big deal with a good work ethic.</description>
    </item>
    
  </channel>
</rss>
